layer_conv_1d(filters = 128, kernel_size = 3, padding = 'same', input_shape = c(288, 1)) %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_conv_1d(filters = 32, kernel_size = 3, padding = 'same') %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_conv_1d(filters = 8, kernel_size = 3, padding = 'same') %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_flatten() %>%
layer_dense(32, activation = 'relu') %>%
layer_upsampling_1d(size = 2)
autoencoder_pollution <- keras_model_sequential() %>%
layer_conv_1d(filters = 128, kernel_size = 3, padding = 'same', input_shape = c(288, 1)) %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_conv_1d(filters = 32, kernel_size = 3, padding = 'same') %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_conv_1d(filters = 8, kernel_size = 3, padding = 'same') %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_flatten() %>%
layer_upsampling_1d(size = 2)
?layer_upsampling_1d
require(kreas)
require(keras)
?layer_lstm
constant <- c(-0.5, 0, 3.5, -1, 0, 8, 7, -1, 3, -6, 0, -1, 0, 1, -7, 0, -2.5, 1, 0, 6, 0, -4, 3, 0, 6)
length(constant)
constant <- c(-0.5, 0, 3.5, -1, 0, 8, 7, -1, 3, -6, 0, -1, 0, 1, -7, 0, -2.5, 1, 0, 6, 0, 0, -4, 3, 0, 6)
partE <- c(6, 0, 0, 0, 1, -1, 2, -4, -4, 4, -3, 0, 0, 0, -2, 4, 0, -4, 0, -2, -5, -1, -2, 2, 0, 0, -3, 0, 0)
length(partE)
partE <- c(6, 0, 0, 0, 1, -1, 2, -4, 4, -3, 0, 0, 0, -2, 4, 0, -2, -5, -1, -2, 2, 0, 0, -3, 0, 0)
length(partE)
partV <- c(0.5, 0, -1.5, 1, 0, 0, 0, 2, 0, -1, 0, 0, 0, 0, 2, 0, 3/2, -1, 1, -2, 0, 1, 2, -1, 0, -1)
length(partV)
observed <- c(1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1)
alfabet_arr <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')
woord <- c('nul', 'zero', 'een', 'un', 'twee', 'deux', 'drie', 'trois', 'vier', 'quatre', 'vijf', 'cinq',
'zes', 'six', 'zeven', 'sept', 'acht', 'huit', 'negen', 'neuf')
compute <- function(valueE, valueV) {
value <- constant + partE * valueE + partV * valueV
result <- rep(0, length(woord))
for(i in 1:length(woord)) {
index <- match(unlist(strsplit(woord[i], "")), alfabet_arr)
result[i] <- sum(value[index])
}
result
}
valueE <- 1
valueV <- 3
value <- constant + partE * valueE + partV * valueV
result <- rep(0, length(woord))
for(i in 1:length(woord)) {
index <- match(unlist(strsplit(woord[i], "")), alfabet_arr)
result[i] <- sum(value[index])
}
result
constant <- c(-0.5, 0, 3.5, -1, 0, 8, 7, -1, 3, -6, 0, -1, 0, 1, -7, 0, -2.5, 1, 0, 6, 0, 0, -4, 3, 0, 6)
partE <- c(6, 0, 0, 0, 1, -1, 2, -4, 4, -3, 0, 0, 0, -2, 4, 0, -2, -5, -1, -2, 2, 0, 0, -3, 0, 0)
partV <- c(1.5, 0, -1.5, 1, 0, 0, 0, 2, 0, -1, 0, 0, 0, 0, 2, 0, 3/2, -1, 1, -2, 0, 1, 2, -1, 0, -1)
observed <- c(1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1)
alfabet_arr <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')
woord <- c('nul', 'zero', 'een', 'un', 'twee', 'deux', 'drie', 'trois', 'vier', 'quatre', 'vijf', 'cinq',
'zes', 'six', 'zeven', 'sept', 'acht', 'huit', 'negen', 'neuf')
value <- constant + partE * valueE + partV * valueV
result <- rep(0, length(woord))
for(i in 1:length(woord)) {
index <- match(unlist(strsplit(woord[i], "")), alfabet_arr)
result[i] <- sum(value[index])
}
result
constant <- c(-0.5, 0, 3.5, -1, 0, 8, 7, -1, 3, -6, 0, -1, 0, 1, -7, 3, -2.5, 1, 0, 6, 0, 0, -4, 3, 0, 6)
partE <- c(6, 0, 0, 0, 1, -1, 2, -4, 4, -3, 0, 0, 0, -2, 4, 2, -2, -5, -1, -2, 2, 0, 0, -3, 0, 0)
partV <- c(1.5, 0, -1.5, 1, 0, 0, 0, 2, 0, -1, 0, 0, 0, 0, 2, -1, 3/2, -1, 1, -2, 0, 1, 2, -1, 0, -1)
observed <- c(1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1)
alfabet_arr <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')
woord <- c('nul', 'zero', 'een', 'un', 'twee', 'deux', 'drie', 'trois', 'vier', 'quatre', 'vijf', 'cinq',
'zes', 'six', 'zeven', 'sept', 'acht', 'huit', 'negen', 'neuf')
value <- constant + partE * valueE + partV * valueV
result <- rep(0, length(woord))
for(i in 1:length(woord)) {
index <- match(unlist(strsplit(woord[i], "")), alfabet_arr)
result[i] <- sum(value[index])
}
result
partV <- c(1.5, 0, -1.5, 1, 0, 0, 0, 2, 0, -1, 0, 0, 0, 0, 2, 1, 3/2, -1, 1, -2, 0, 1, 2, -1, 0, -1)
observed <- c(1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1)
alfabet_arr <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')
woord <- c('nul', 'zero', 'een', 'un', 'twee', 'deux', 'drie', 'trois', 'vier', 'quatre', 'vijf', 'cinq',
'zes', 'six', 'zeven', 'sept', 'acht', 'huit', 'negen', 'neuf')
value <- constant + partE * valueE + partV * valueV
result <- rep(0, length(woord))
for(i in 1:length(woord)) {
index <- match(unlist(strsplit(woord[i], "")), alfabet_arr)
result[i] <- sum(value[index])
}
result
constant <- c(-0.5, 0, 3.5, -1, 0, 8, 7, -1, 3, -6, 0, -1, 0, 1, -7, 1, -2.5, 1, 0, 6, 0, 0, -4, 3, 0, 6)
partV <- c(1.5, 0, -1.5, 1, 0, 0, 0, 2, 0, -1, 0, 0, 0, 0, 2, 1, 3/2, -1, 1, -2, 0, 1, 2, -1, 0, -1)
partE <- c(6, 0, 0, 0, 1, -1, 2, -4, 4, -3, 0, 0, 0, -2, 4, 2, -2, -5, -1, -2, 2, 0, 0, -3, 0, 0)
observed <- c(1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1)
alfabet_arr <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')
woord <- c('nul', 'zero', 'een', 'un', 'twee', 'deux', 'drie', 'trois', 'vier', 'quatre', 'vijf', 'cinq',
'zes', 'six', 'zeven', 'sept', 'acht', 'huit', 'negen', 'neuf')
value <- constant + partE * valueE + partV * valueV
result <- rep(0, length(woord))
for(i in 1:length(woord)) {
index <- match(unlist(strsplit(woord[i], "")), alfabet_arr)
result[i] <- sum(value[index])
}
result
value
valueE <- 1
valueV <- 1
value <- constant + partE * valueE + partV * valueV
value
value <- (constant + partE * valueE + partV * valueV)[observed]
value
observed
value <- (constant + partE * valueE + partV * valueV)[which(observed)]
value <- (constant + partE * valueE + partV * valueV)[which(observed == 1)]
value
for(valueE in -60:60) {
for(valueV in -60:60) {
value <- (constant + partE * valueE + partV * valueV)[which(observed == 1)]
if(length(unique(value)) == sum(observed) & (max(value) - min(value) < 60)) {
cat("E: ", valueE, ", V: ", valueV)
}
}
}
woord <- c('nul', 'zero', 'een', 'un', 'twee', 'deux', 'drie', 'trois', 'vier', 'quatre', 'vijf', 'cinq',
'zes', 'six', 'zeven', 'sept', 'acht', 'huit', 'negen', 'neuf', 'tien', 'elf', 'twaalf', 'dix', 'onze', 'douze')
value <- constant + partE * valueE + partV * valueV
result <- rep(0, length(woord))
for(i in 1:length(woord)) {
index <- match(unlist(strsplit(woord[i], "")), alfabet_arr)
result[i] <- sum(value[index])
}
result
value
for(valueE in -120:120) {
for(valueV in -120:120) {
value <- (constant + partE * valueE + partV * valueV)[which(observed == 1)]
if(length(unique(value)) == sum(observed) & (max(value) - min(value) < 60)) {
cat("E: ", valueE, ", V: ", valueV)
}
}
}
for(valueE in -1000:1000) {
for(valueV in -1000:1000) {
value <- (constant + partE * valueE + partV * valueV)[which(observed == 1)]
if(length(unique(value)) == sum(observed) & (max(value) - min(value) < 60)) {
cat("E: ", valueE, ", V: ", valueV)
}
}
}
for(valueE in -60:60) {
for(valueV in -60:60) {
value <- (constant + partE * valueE + partV * valueV)[which(observed == 1)]
if(length(unique(value)) == sum(observed) & (max(value) - min(value)) < 60) {
cat("E: ", valueE, ", V: ", valueV)
}
}
}
valueE <- -5
valueV <- 1
value <- constant + partE * valueE + partV * valueV
result <- rep(0, length(woord))
for(i in 1:length(woord)) {
index <- match(unlist(strsplit(woord[i], "")), alfabet_arr)
result[i] <- sum(value[index])
}
result
value
result
shape <- c(rep(0, 8), rep(1, 6), rep(1, 14*6), rep(rep(1, 6), rep(0, 8), 9))
as.matrix(shape, ncol = 14, byrow = TRUE)
shape
length(shape)
rep(0, 8), rep(1, 6)
c(rep(0, 8), rep(1, 6))
rep(1, 14*6)
shape <- c(rep(0, 8), rep(1, 6), rep(1, 14*6), rep(c(rep(1, 6), rep(0, 8)), 9))
as.matrix(shape, ncol = 14, byrow = TRUE)
m <- as.matrix(shape, ncol = 14, byrow = TRUE)
dim(m)
c(rep(1, 6), rep(0, 8))
rep(c(rep(1, 6), rep(0, 8)), 9)
matrix(rep(c(rep(1, 6), rep(0, 8)), 9), col = 14)
matrix(rep(c(rep(1, 6), rep(0, 8)), 9), ncol = 14)
matrix(rep(c(rep(1, 6), rep(0, 8)), 9), ncol = 14, byrow = TRUE)
length(shape)
length(shape)/14
m <- as.matrix(shape, ncol = 14, byrow = TRUE)
dim(m)
m <- matrix(shape, ncol = 14, byrow = TRUE)
dim(m)
head(m)
shape <- matrix(shape, ncol = 14, byrow = TRUE)
t(shape)
res <- t(shape)
apply(res, 2, rev)
rotate90 <- function(shape) {
res <- t(shape)
res <- apply(res, 2, rev)
return(res)
}
shapes <- c(shape, rotate90(shape), rotate90(rotate90(shape)), rotate90(rotate90(rotate90(shape))))
dim(shapes)
class(shapes)
shapes <- list(shape, rotate90(shape), rotate90(rotate90(shape)), rotate90(rotate90(rotate90(shape))))
shapes[[]]
shapes[[3]]
shapes[[2]]
shapes[[4]]
embedding <- matrix(0, nrow = 50, ncol = 50)
embedding <- matrix(0, nrow = 50, ncol = 50)
embedding[20:(20+nrow(shape)), 20:(20+ncol(shape))] <- shape
20:(20+nrow(shape)), 20:(20+ncol(shape))
20:(20+nrow(shape))
20:(20+ncol(shape))
embedding[20:(19+nrow(shape)), 20:(19+ncol(shape))] <- shape
embedding
library(leaflet)
setwd("C:/Users/u0110176/Dropbox/Datathon 2020/presentation")
load('data/leaflet_step2.RData')
pal <- colorNumeric(
palette = colorRampPalette(c('blue', 'red'))(6),
domain = 0:5/2)
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon_leuven, fillColor = pal(pmin(predict_leuven2, 2.5)), weight = 0, fillOpacity = 0.7)
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon, fillColor = pal(pmin(predict_leuven2, 2.5)), weight = 0, fillOpacity = 0.7)
load('data/leaflet_change.RData')
pal <- colorNumeric(
palette = colorRampPalette(c('white', 'green'))(8),
domain = seq(0, 0.35, by =0.05))
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon_change, fillColor = pal(pmax(-change, 0)), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon_change, fillColor = pal(pmax(-change, 0)), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 14)
load("data/station_data.RData")
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
xlab('time') + ylab('temperature') +
ggtitle('Comparison temperature Leuven center and suburbs')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
scale_colour_manual('', values = c("#116E8A", "#FFA500"), c('City center', 'Suburbs')) +
ylab('temperature, °C') +
ggtitle('Temperature Leuven August, 2019')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
scale_colour_manual('', values = c("#FFA500", "#116E8A"), c('City center', 'Suburbs')) +
ylab('temperature, °C') +
ggtitle('Temperature Leuven August, 2019')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
scale_colour_manual('', values = c("#FFA500", "#116E8A"), c('City center', 'Suburbs')) +
ylab('temperature, °C') +
ggtitle('Temperature Leuven August, 2019')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
scale_colour_manual(' ', values = c("#FFA500", "#116E8A"), c('City center', 'Suburbs')) +
ylab('temperature, °C') +
ggtitle('Temperature Leuven August, 2019')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
scale_colour_manual(' a', values = c("#FFA500", "#116E8A"), c('City center', 'Suburbs')) +
ylab('temperature, °C') +
ggtitle('Temperature Leuven August, 2019')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
ggtitle('Temperature Leuven August, 2019') +
scale_colour_manual(values = c("#FFA500", "#116E8A"), c('City center', 'Suburbs')) +
ylab('temperature, °C')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
ggtitle('Temperature Leuven August, 2019') +
scale_colour_manual(values = c("#FFA500", "#116E8A"), label=c('City center', 'Suburbs')) +
ylab('temperature, °C')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
ggtitle('Temperature Leuven August, 2019') +
scale_colour_manual('', values = c("#FFA500", "#116E8A"), label=c('City center', 'Suburbs')) +
ylab('temperature, °C')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
ggtitle('Temperature Leuven August, 2019') +
scale_colour_manual('', values = c("#e8562a", "#116E8A"), label=c('City center', 'Suburbs')) +
ylab('temperature, °C')
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
ggtitle('Temperature Leuven August, 2019') +
scale_colour_manual('', values = c("#e8562a", "#116E8A"), label=c('City center', 'Suburbs')) +
ylab('temperature, °C') + xlab('') +
theme(plot.title = element_text(hjust = 0.5))
load('data/leaflet_change.RData')
max(change)
summary(change[change > 0])
round(summary(change[change > 0])n 2)
round(summary(change[change > 0]), 2)
round(summary(change[change > 0]), 4)
load('data/leaflet_change.RData')
pal <- colorNumeric(
palette = colorRampPalette(c('white', 'green'))(8),
domain = seq(0, 0.35, by =0.05))
load('data/leaflet_change.RData')
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon_change, fillColor = pal(pmax(-change, 0)), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon, fillColor = pal(-delta), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
load('data/leaflet_change.RData')
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon, fillColor = pal(-delta), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
polygon
load('data/leaflet_change.RData')
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon, fillColor = pal(-delta), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
delta
min(delta)
load('data/leaflet_change.RData')
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon, fillColor = pal(-delta), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
pal
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon, fillColor = pal(delta), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
require(tidyverse)
betas <- readRDS('data/lm_betas.rds')
smooth_fit <- loess(beta ~ as.numeric(day), data = betas, span = 0.5)
betas <- betas %>% mutate(smooth = predict(smooth_fit))
betas %>% ggplot(aes(x = day, y = smooth)) + geom_line() + theme_bw()
betas %>% filter(day >= '2019-07-01', day <= '2019-09-01') %>% summarise(mean_beta = mean(smooth))
betas %>% ggplot(aes(x = day, y = smooth)) + geom_line() + theme_bw()
betas %>%
ggplot(aes(x = day, y = smooth), color = KULbg, size=2) +
geom_line() +
theme_bw()
betas %>%
ggplot(aes(x = day, y = smooth), color = KULbg, size=2) +
geom_line() +
theme_bw()
betas %>% filter(day >= '2019-07-01', day <= '2019-09-01') %>% summarise(mean_beta = mean(smooth))
betas %>%
ggplot(aes(x = day, y = smooth), color = KULbg, size=2) +
geom_line() +
theme_bw()
betas %>%
ggplot(aes(x = day, y = smooth)) +
geom_line(color = KULbg, size=2) +
theme_bw()
betas %>%
ggplot(aes(x = day, y = smooth)) +
geom_line(color = "#116E8A", size=2) +
theme_bw()
betas %>%
ggplot(aes(x = day, y = smooth)) +
geom_line(color = "#116E8A", size=2) +
theme_bw() +
xlab('') +
ylab('smooth effect')
load('data/leaflet_change.RData')
pal <- colorNumeric(
palette = colorRampPalette(c('white', 'green'))(8),
domain = seq(0, 0.35, by =0.05))
max(delta)
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon, fillColor = pal(-delta), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
load('data/nn_score.RData')
ggplot() +
theme_bw() +
geom_point(aes(predictions, actual_score))
ggplot() +
theme_bw() +
geom_point(aes(predictions, actual_score), color = "#116E8A") +
xlab('score model nl') +
ylab('prediction neural network') +
ggtitle('out-of-sample evaluation neural network')
length(polygon)
load('data/leaflet_step2.RData')
length(polygon)
load('data/leaflet_change.RData')
# Chunk 1: knitr
library(knitr)
opts_chunk$set(digits = 3, fig.path = "Images/neural_networks_")
evaluate_r = TRUE
library(fontawesome)
# colors - I copied most of these from # https://github.com/edrubin/EC524W20
dark2 <- RColorBrewer::brewer.pal(8, name = "Dark2")
KULbg <- "#116E8A"
red_pink   = "#e64173"
turquoise  = "#20B2AA"
orange     = "#FFA500"
red        = "#fb6107"
blue       = "#3b3b9a"
green      = "#8bb174"
grey_light = "grey70"
grey_mid   = "grey50"
grey_dark  = "grey20"
purple     = "#6A5ACD"
slate      = "#314f4f"
# Chunk 2
load("data/station_data.RData")
ggplot() +
theme_bw() +
geom_point(aes(sub37$date_time, sub37$temperature, color = 'Leuven center')) +
geom_point(aes(sub16$date_time, sub16$temperature, color = 'Leuven suburbs')) +
ggtitle('Temperature Leuven August, 2019') +
scale_colour_manual('', values = c("#e8562a", "#116E8A"), label=c('City center', 'Suburbs')) +
ylab('temperature, °C') + xlab('') +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 3
knitr::include_graphics("Images/slide_dutch.png")
# Chunk 4
knitr::include_graphics("Images/slide_nn.png")
# Chunk 5: leaf1
library(leaflet)
load('data/leaflet_step2.RData')
pal <- colorNumeric(
palette = colorRampPalette(c('blue', 'red'))(6),
domain = 0:5/2)
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon, fillColor = pal(pmin(predict_leuven2, 2.5)), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
# Chunk 6
knitr::include_graphics("Images/color_scale.png")
# Chunk 7
load('data/nn_score.RData')
ggplot() +
theme_bw() +
geom_point(aes(predictions, actual_score), color = "#116E8A") +
ylab('score model nl') +
xlab('prediction neural network') +
ggtitle('out-of-sample evaluation neural network') +
theme(plot.title = element_text(hjust = 0.5),
text = element_text(size=20))
# Chunk 8
require(tidyverse)
betas <- readRDS('data/lm_betas.rds')
smooth_fit <- loess(beta ~ as.numeric(day), data = betas, span = 0.5)
betas <- betas %>% mutate(smooth = predict(smooth_fit))
betas %>%
ggplot(aes(x = day, y = smooth)) +
geom_line(color = "#116E8A", size=2) +
theme_bw() +
xlab('') +
ylab('smooth effect') +
theme(plot.title = element_text(hjust = 0.5),
text = element_text(size=20)) +
ggtitle('Calibrated, Leuven by summer night')
load('data/leaflet_change.RData')
pol <- polygon
pal <- colorNumeric(
palette = colorRampPalette(c('white', 'green'))(8),
domain = seq(0, 0.35, by =0.05))
leaflet() %>%
addTiles() %>%
setView(4.7, 50.8766, 13) %>%
addPolygons(data = pol, fillColor = pal(-delta), weight = 0, fillOpacity = 0.7)
library(leaflet)
load('data/leaflet_step2.RData')
pal <- colorNumeric(
palette = colorRampPalette(c('blue', 'red'))(6),
domain = 0:5/2)
leaflet() %>%
addTiles() %>%
addPolygons(data = polygon, fillColor = pal(pmin(predict_leuven2, 2.5)), weight = 0, fillOpacity = 0.7) %>%
setView(4.7, 50.8766, 13)
